import asyncio
import time

from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from bot.keyboards.inline import generate_leads_statuses_kb
from bot.keyboards.reply import APPROVE_KB, EMPTY_KB
from bot.keyboards.reply import MAIN_MENU_KB
from bot.states.forms import SessionForm, PaymentCodeSettingForm
from db.leads import LeadGenerationResultsService
from db.gologin import GologinApikeysRepository
from db.transfer import LeadGenResultStatus
from db.sms import SmsServiceApikeyRepository
from parser.profiles.gologin import GologinProfilesManager
from parser.sessions import LeadsGenerationSession
from parser.main import LeadsGenerator
from ..common import db_services_provider, leads_service_provider

from ._utils import all_threads_ended, leads_differences_exists
from . import _labels as labels

router = Router(name=__name__)


@router.message(CommandStart())
@db_services_provider(provide_leads=False, provide_sms=True)
async def start(
        message: Message, state: FSMContext,
        gologindb: GologinApikeysRepository,
        smsdb: SmsServiceApikeyRepository):
    await state.clear()

    gologin_apikey, sms_service_apikey = (
        gologindb.get_current(), smsdb.get_current()
    )

    await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"üè†<b>–ú–µ–Ω—é –ü–∞—Ä—Å–µ—Ä–∞ V4</b>\n"
             f"ü§ñ<b>Gologin apikey: {"‚úÖ" if gologin_apikey else "üìõ"}"
             f"<code>{gologin_apikey[:6] + '...' + gologin_apikey[-3:]
                      if gologin_apikey
                      else ""}"
             f"</code></b>\n"
             f"‚òé<b>El-Sms apikey: {"‚úÖ" if sms_service_apikey else "üìõ"}"
             f"<code>{sms_service_apikey[:6] + '...' + sms_service_apikey[-3:]
                      if sms_service_apikey
                      else ""}"
             f"</code></b>",
        reply_markup=MAIN_MENU_KB
    )


@router.message(F.text == "üî•–ù–æ–≤—ã–π –°–µ–∞–Ω—Å")
@db_services_provider(provide_leads=False, provide_sms=True)
async def new_session(
        message: Message,
        state: FSMContext,
        gologindb: GologinApikeysRepository,
        smsdb: SmsServiceApikeyRepository):
    if not (gologindb.exists and smsdb.exists):
        return await message.reply(
            "‚≠ï–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ <b>Gologin apikey</b> –∏ "
            "<b>El-Sms apikey</b>"
        )

    await state.set_state(state=SessionForm.set_count_complete_requests)

    await message.reply(
        text="–ö–∞–∫–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
             "\n\n<i>–≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è</i>",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(SessionForm.set_count_complete_requests)
async def set_count_requests(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply(text="–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n<i>–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "
                                 "—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º</i>")
        return

    count = abs(int(message.text))

    await state.set_data(data={"count_requests": count})
    await state.set_state(SessionForm.set_ref_link)

    await message.reply(
        text="<b>–û—Ç–ª–∏—á–Ω–æ</b>, —Ç–µ–ø–µ—Ä—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:"
    )


@router.message(SessionForm.set_ref_link)
async def process_ref_link(message: Message, state: FSMContext):
    ref_link = message.text

    if (not ref_link.startswith("https://")) or (" " in ref_link):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞</i>")
        return

    current_session_form = dict(await state.get_data())
    await state.set_data(data=current_session_form | {"ref_link": ref_link})

    await state.set_state(state=SessionForm.set_card_number)

    await message.reply(text="üî¢–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
                             "<i>number@date@cvc</i>")


@router.message(SessionForm.set_card_number)
async def set_payments_card(message: Message, state: FSMContext):
    if not len(message.text.split("@")) == 3:
        return await message.reply(
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–º–µ—Ä:\n<i>1111222233334444@12.24@999</i>"
        )

    await state.set_data(
        data=dict(await state.get_data()) | {
            "payments_card": message.text.replace(" ", "")
        }
    )

    await state.set_state(state=SessionForm.set_proxy)

    await message.reply(
        text="üì© –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª–∏–Ω–Ω–æ–π —Ä–∞–≤–Ω–æ–π –∫–æ–ª-–≤—É –ª–∏–¥–æ–≤:\n\n"
             "<i>login:password@host:port login1:password1@host1:port1 ...</i>"
    )


@router.message(SessionForm.set_proxy)
async def add_proxies(message: Message, state: FSMContext):
    current_session_form = dict(await state.get_data())
    try:
        proxies = message.text.split("\n")

        for i in proxies:
            if len(i.split("@")) != 2:
                raise ValueError
            if len(i.split("@")[0].split(":")) != 2:
                raise ValueError
            if len(i.split("@")[-1].split(":")) != 2:
                raise ValueError
    except:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")
        return

    correct_proxies_len = int(current_session_form.get("count_requests"))*3

    if len(proxies) != correct_proxies_len:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–∫—Å–∏ "
                            f"{len(proxies)} -> {correct_proxies_len}")
        return

    await state.set_data(data=current_session_form | {
        "proxies": proxies
    })

    await state.set_state(state=SessionForm.approve_session)

    await message.reply(
        text="‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n"
             f"| –ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: "
             f"{current_session_form.get("count_requests")}\n"
             f"| –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: <code>"
             f"{current_session_form.get("ref_link")}</code>\n"
             f"| –ü—Ä–æ–∫—Å–∏: {len(proxies)} —à—Ç.",
        reply_markup=APPROVE_KB,
    )


@router.message(SessionForm.approve_session)
@db_services_provider(provide_gologin=False)
@leads_service_provider
async def approve_session(
        message: Message, state: FSMContext,
        leadsdb: LeadGenerationResultsService,
        parser_service: LeadsGenerator
):
    if message.text != "‚úÖ–ù–∞—á–∞—Ç—å —Å–µ–∞–Ω—Å":
        await message.reply("‚úÖ–û—Ç–º–µ–Ω–µ–Ω")
        await state.clear()
        return

    session_form = await state.get_data()

    session_form = LeadsGenerationSession(
        ref_link=session_form.get("ref_link"),
        proxies=session_form.get("proxies"),
        card=session_form.get("payments_card"),
        count=session_form.get("count_requests"),
    )

    await state.clear()

    replyed = await message.reply(
        text=labels.SESSION_INFO,
        reply_markup=EMPTY_KB
    )

    session_id = parser_service.mass_generate(data=session_form)

    leads, prev_leads, START_POLLING = None, list(), time.time()

    while True:
        leads = leadsdb.get(session_id=session_id) or []

        if not leads:
            continue

        req_update = leads_differences_exists(
            prev_leads=prev_leads,
            leads=leads
        )

        if req_update:
            try:
                await replyed.edit_reply_markup(
                    reply_markup=generate_leads_statuses_kb(leads=leads)
                )
            except Exception as e:
                print(e)

        if all_threads_ended(leads=leads):
            await asyncio.sleep(1)
            return await message.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ<b>–°–µ—Å—Å–∏—è #{session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>"
            )

        if time.time() - START_POLLING > 60*60:
            await asyncio.sleep(1)
            return await message.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ùå–°–µ—Å—Å–∏—è #{session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ 1 —á–∞—Å–æ–≤–æ–º—É "
                     "—Ç–∞–π–º–∞—É—Ç—É!"
            )

        prev_leads = leads

        await asyncio.sleep(1.1)


@router.message(PaymentCodeSettingForm.wait_payment_code)
@db_services_provider(provide_gologin=False)
async def set_payment_code(
        message: Message, state: FSMContext,
        leadsdb: LeadGenerationResultsService
):
    state_data = dict(await state.get_data())

    bot_reply_msg_id, session_id, lead_id = state_data.values()

    if bot_reply_msg_id:
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=bot_reply_msg_id
        )

    user_code, chat_id = message.text, message.chat.id

    await message.delete()

    if not user_code.isdigit() or len(user_code) != 4:
        bot_reply_msg_id = await message.bot.send_message(
            chat_id=chat_id,
            text="‚ùå<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )

        return await state.set_data(
            data=state_data | {"bot_message_id": bot_reply_msg_id}
        )

    await state.clear()

    leadsdb.change_status(
        status=LeadGenResultStatus.CODE_RECEIVED,
        session_id=session_id,
        lead_id=lead_id,
        sms_code=message.text
    )